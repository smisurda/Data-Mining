library(zoo)
install.packages("zoo")
install.packages("leaps")
library(zoo)
library(plyr)
library(MASS)
library(leaps)
##############################
#prepare data for PCA analysis
##############################
mydata <- read.csv('SP500_close_price.csv')
date <- as.Date(as.character(mydata[, 1]), format="%m/%d/%Y")
myzoo <- zoo(mydata[,-1], date )
myzoo <- na.locf(myzoo) #impute missing values
prices2returns <- function(x) 100*diff(log(x)) #function to covert from price to return
log.return.zoo <- prices2returns(myzoo)
log.return.data <- coredata(log.return.zoo) #data
log.return.date <- time(log.return.zoo) #date
help("prcomp")
#####
# Problem 1A
#####
returns.pca <- prcomp(log.return.data, center = TRUE, scale. = TRUE)
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, center = TRUE, scale. = TRUE)
screeplot(returns.pca)
returns.pca$Eigenvalues
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, center = TRUE, scale. = TRUE)
screeplot(returns.pca)
summary(returns.pca)
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, center = TRUE, scale = TRUE)
screeplot(returns.pca)
summary(returns.pca)
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca)
#summary(returns.pca)
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca, type="lines")
#summary(returns.pca)
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- princomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca, type="lines")
#summary(returns.pca)
help(plot)
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- princomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA model of Stock Returns")
#####
# Problem 1A
#####
# Perform PCA
returns.pca <- princomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.2
#####
plot(cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2)))
help("cumsum")
#####
# Problem 1.2
#####
# Calculate the cumulative sum of variances
cumulative.sum <- cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2))
plot(cumulative.sum)
help(plot)
#####
# Problem 1.2
#####
# Calculate the cumulative sum of variances
cumulative.sum <- cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2))
plot(cumulative.sum, xlab = "Number of Components Kept", ylab = "Percentage of Variances", main = "Cumulative Sum of Variances")
returns.pca$sdev
######
# Problem 1.3
#####
# The answer is 2
total.variance <- sum(returns.pca$sdev)
returns.pca$sdev[2]
######
# Problem 1.4
#####
# The answer is 2
sum(returns.pca$sdev[1], returns.pca$sdev[2])
######
# Problem 1.4
#####
# The answer is 2
sum(returns.pca$sdev[1], returns.pca$sdev[2])/total.variance
######
# Problem 1.3
#####
# The answer is 2
total.variance <- sum(returns.pca$sdev[1:2])
######
# Problem 1.3
#####
# The answer is 2
total.variance <- sum(returns.pca$sdev[1:2]^2)
returns.pca$sdev[1:2]
######
# Problem 1.3
#####
# The answer is 2
total.variance <- sum(returns.pca$sdev[1:2]^2/sum(returns.pca$sdev^2))
######
# Problem 1.3
#####
# The answer is 2
for i in 1:nrows(returns.pca) {
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:nrows(returns.pca)) {
total.variance <- sum(returns.pca$sdev[1:2]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:nrow(returns.pca)) {
total.variance <- sum(returns.pca$sdev[1:2]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:nrow(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:2]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:2]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:i]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
predict(returns.pca, 0)
predict(returns.pca, c(0))
predict(returns.pca, log.return.data)
View(log.return.data)
View(log.return.data)
######
# Problem 1.4
#####
pc.use <- 2 # explains 93% of variance
trunc <- returns.pca$x[,1:pc.use] %*% t(returns.pca$rotation[,1:pc.use])
######
# Problem 1.4
#####
pc.use <- 2 # explains 93% of variance
trunc <- returns.pca$x[,1:pc.use] %*% log.return.data(returns.pca$rotation[,1:pc.use])
returns.pca$x[,1:pc.use]
returns.pca$x[,1:2]
returns.pca[,1:2]
returns.pca[1:2]
returns.pca[1:2,]
returns.pca[1:2]
#####
# Problem 1.1
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.2
#####
# Calculate the cumulative sum of variances
cumulative.sum <- cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2))
plot(cumulative.sum, xlab = "Number of Components Kept", ylab = "Percentage of Variances", main = "Cumulative Sum of Variances")
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:i]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
#####
# Problem 1.1
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, retx = TRUE, center = TRUE, scale = TRUE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.2
#####
# Calculate the cumulative sum of variances
cumulative.sum <- cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2))
plot(cumulative.sum, xlab = "Number of Components Kept", ylab = "Percentage of Variances", main = "Cumulative Sum of Variances")
sum(returns.pca$sdev^2)
sum(returns.pca$sdev)
sum(returns.pca$sdev^2)
returns.pca$sdev[1]
returns.pca$sdev[1]/471
returns.pca$sdev[1]^2/471
######
# Problem 1.4
#####
pc.use <- 2 # explains 80.4% of variance
trunc <- returns.pca$x[,1:pc.use] %*% log.return.data[returns.pca$rotation[,1:pc.use])
######
# Problem 1.4
#####
pc.use <- 2 # explains 80.4% of variance
trunc <- returns.pca$x[,1:pc.use] %*% log.return.data[returns.pca$rotation[,1:pc.use]
#and add the center (and re-scale) back to data
if(returns.pca$scale != FALSE){
######
# Problem 1.4
#####
pc.use <- 2 # explains 80.4% of variance
trunc <- returns.pca$x[,1:pc.use] %*% log.return.data[returns.pca$rotation[,1:pc.use]]
##############################
#prepare data for PCA analysis
##############################
mydata <- read.csv('SP500_close_price.csv')
date <- as.Date(as.character(mydata[, 1]), format="%m/%d/%Y")
myzoo <- zoo(mydata[,-1], date )
myzoo <- na.locf(myzoo) #impute missing values
prices2returns <- function(x) 100*diff(log(x)) #function to covert from price to return
log.return.zoo <- prices2returns(myzoo)
log.return.data <- coredata(log.return.zoo) #data
log.return.date <- time(log.return.zoo) #date
#####
# Problem 1.1
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, retx = TRUE, center = TRUE, scale = TRUE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.2
#####
# Calculate the cumulative sum of variances
cumulative.sum <- cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2))
plot(cumulative.sum, xlab = "Number of Components Kept", ylab = "Percentage of Variances", main = "Cumulative Sum of Variances")
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:i]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.3
#####
# The answer is 2
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:i]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.3
#####
# Iterate over components and stop when variance is 80%
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:i]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.4
#####
pc.use <- 2
trunc <- returns.pca$x[,1:pc.use] %*% log.return.data[returns.pca$rotation[,1:pc.use]]
help(princomp)
######
# Problem 1.4
#####
1 - cumulative.sum[2]
######
# Problem 2, Part B
######
feature.subsets <- regsubsets(fatpctg~., data = bmi, nbest = 1, nvmax = 3, method = "exhaustive")
#########
#
# Problem 2
#
########
# Computes the absolute values of linear correlation coefficients between each input and the output
# Outputs sorted data frame with names of features and the corresponding coefficients
filter.features.by.cor <- function(df){
result <- data.frame(Feature = c(), Correlation = c())
# Loop over features, excluding output
for(i in 1:ncol(df)-1){
feature.name <- colnames(df)[i]
correlation <- abs(cor(df[i], df[ncol(df)]))
result <- rbind(result, data.frame(Feature = feature.name, Correlation = correlation))
}
# Remove row names
row.names(result) <- NULL
# Rename columns
colnames(result) <- c("Feature", "Correlation")
# Sort rows by correlation
result <- result[order(-result$Correlation),]
return(result)
}
#######
# Problem 2, Part A
#######
bmi <- read.csv("BMI.csv")
feature.correlations <- filter.features.by.cor(bmi)
# Full correlation data
feature.correlations
# Print out top 3
feature.correlations[1:3,]
######
# Problem 2, Part B
######
feature.subsets <- regsubsets(fatpctg~., data = bmi, nbest = 1, nvmax = 3, method = "exhaustive")
summary(feature.subsets)
plot(feature.subsets, scale = "adjr2", main = "Adjusted R^2")
######
# Problem 2, Part C
######
# Build the model on all variables
model <- lm(fatpctg ~ . , data = bmi)
# Run stepwise regression
step <- stepAIC(model, direction = "backward")
# Print results
step$anova
#####
# Problem 1.1
#####
# Perform PCA
#returns.pca <- prcomp(log.return.data, retx = TRUE, center = TRUE, scale = TRUE)
returns.pca <- princomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.2
#####
# Calculate the cumulative sum of variances
cumulative.sum <- cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2))
plot(cumulative.sum, xlab = "Number of Components Kept", ylab = "Percentage of Variances", main = "Cumulative Sum of Variances")
#####
# Problem 1.1
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, retx = TRUE, center = TRUE, scale = TRUE)
#returns.pca <- princomp(log.return.data, center = TRUE, scale = TRUE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.1
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, retx = TRUE, center = TRUE, scale = FALSE)
#returns.pca <- princomp(log.return.data, center = TRUE, scale = FALSE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.1
#####
# Perform PCA
#returns.pca <- prcomp(log.return.data, retx = TRUE, center = TRUE, scale = FALSE)
returns.pca <- princomp(log.return.data, center = TRUE, scale = FALSE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.1
#####
# Perform PCA
returns.pca <- prcomp(log.return.data, retx = TRUE, center = TRUE, scale = FALSE)
#returns.pca <- princomp(log.return.data, center = TRUE, scale = FALSE)
plot(returns.pca, type = "lines", main = "Screeplot for PCA Model of Stock Returns")
#####
# Problem 1.2
#####
# Calculate the cumulative sum of variances
cumulative.sum <- cumsum(returns.pca$sdev^2/sum(returns.pca$sdev^2))
plot(cumulative.sum, xlab = "Number of Components Kept", ylab = "Percentage of Variances", main = "Cumulative Sum of Variances")
######
# Problem 1.3
#####
# Iterate over components and stop when variance is 80%
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:i]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.4
#####
1 - cumulative.sum[2]
######
# Problem 1.4
#####
1 - cumulative.sum[2]
######
# Problem 1.3
#####
# Iterate over components and stop when variance is 80%
for(i in 1:length(returns.pca$sdev)) {
total.variance <- sum(returns.pca$sdev[1:i]^2/sum(returns.pca$sdev^2))
if(total.variance > .80) {
cat(sprintf("A total variance of %f > .80 uses %d components", total.variance, i))
break
}
}
######
# Problem 1.4
#####
1 - cumulative.sum[2]
